import FiveDrawPoker as FDP

def HighCard (rank):
    return rank[4]
            
def OnePair (rank): #(WWxyz) or (wXXyz) or (wxYYz) or (wxyZZ)
    for i in range(len(rank) -1,0,-1):
        if (rank[i] == rank [i-1]):
            return rank[i-1]
    return 0

def TwoPair (rank): #(XXYYz)(XXyZZ)(xYYZZ)
    #I want to count how many pairs I have
    numPairs,lastPair,i = 0,0,0
    while i < len(rank) - 1:
        if (rank[i] == rank[i+1]):
            numPairs += 1
            lastPair = rank[i+1]
            i+=1 #This skips the next one
        i+=1
    if (numPairs >= 2):
        return lastPair
    else:
        return 0
     
def ThreeOfAKind (rank): #(XXXyz)(xYYYz)(xyZZZ)
    if (rank.count(rank[2]) >= 3):
        return rank[2]
    return 0
 
def Straight(rank): #Each one assends in value
    straightList = list(FDP.rankValue)
    straightList.append(14)
    for x in range(2): 
        for i in range(10):
            if (rank == straightList[0+i:5+i]):
                return HighCard(rank)
        rank = rank[-1:] + rank[:-1] #this puts the max at the end in the case for ace
    return 0
         
def Flush(suit): #(ZZZZZ)
    if suit.count(suit[0]) == 5:
        return True
    return False
    
def FullHouse(rank): #(XXYYY) or (XXXYY)
    minTimes = rank.count(rank[0])
    maxTimes = rank.count(rank[4])
    if (minTimes == 2 and maxTimes == 3) or (minTimes == 3 and maxTimes == 2):
        return HighCard(rank)
    return 0

def FourOfAKind(rank): #(XXXXy) or (xYYYY)
    if (rank.count(rank[2]) == 4):
        return rank[2]
    return 0
    
def StraightFlush(rank,suit): #Straight and Flush
    if Straight(rank):
        if Flush(suit):
            return True
    return False

def RoyalFlush(rank,suit): #Straight Flush and HighCard = 14
    if StraightFlush(rank,suit):
        if(HighCard(rank) == 14):
            return True
    return False
