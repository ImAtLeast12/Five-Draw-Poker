from random import *
NUMCARDS = 52
DECK = 0

suitName = ("♥", "♦", "♠", "♣")
rankName = ("A", "2", "3", "4", "5", "6", "7", 
            "8", "9", "10", "J", "Q", "K")
playerName = ("deck", "P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10","P11")
isComputer = (False,False,False,False,False,False,False,False,False,False,False)

NUMPLAYERS = 2 #1 <= NUMPLAYERS <= 10

def main():
    '''deck = Deck() #Initilize deck and players
    player = []

    for i in range(NUMPLAYERS): #Adds players to the game
        player.append(Player(playerName[i+1],False,i+1))

    for i in range(5): #Shuffels the Cards to the players
        for x in range(NUMPLAYERS):
            player[x].assignCard(deck)
           
    for playerOn in range(NUMPLAYERS): #Loop does everyting on each of the players turns
        printName(playerOn,player)

        showHand(playerOn,player)
        scoreHand(playerOn,player)
        input() #So the player has time to respond
        
        if (player[playerOn].isComputer):
            exchangeComputersHand()
        else:
            exchangePlayersHand()
        input()
        
        showHand(playerOn,player)
        
        input()

        passToNextPlayer(playerOn,player)
        input()
        
    if (NUMPLAYERS == 1): #all of the turns are done at this point
        pass
    else:
        findTheWinner()
        tellTheWinner()'''



    deck = Deck() #Initilize deck and players
    player = []
    for playerOn in range(1,NUMPLAYERS+1): #Adds players to the game
        player.append(Player(playerOn,playerName[playerOn],isComputer[playerOn]))

    for i in range(5): #Shuffels the Cards to the players
        for playerOn in range(NUMPLAYERS):
            player[playerOn].hand.cards.append(Card(assignOpenCard(deck,player[playerOn].playerNum))) #IS THIS BAD?

    for playerOn in range(NUMPLAYERS):
        print("It's " + player[playerOn].name + " Trun")    #Initiates the players turn
        print(player[playerOn].hand.printHand())            #prints the players hand
        #ScoreThePlayer()
        #
        
    
def scoreCards(hand):
    cards = hand.cards  #=  [39, 3,37,33,47]
    Arr = hand.Arr      #=  [ 0, 3,11, 7, 8]
    Ar2 = hand.Ar2      #=  [ 3, 0, 2, 2, 3]
    
    #Since this is a hand I can just call this to give me it's arr, and ar2

def assignOpenCard(deck,playerNum): 
    cardsInDeck = []
    for i in range(NUMCARDS):
        if (deck.cards[i].assignedTo == DECK): 
            cardsInDeck.append(i) 
    randNum = int(random()*len(cardsInDeck)) #chooses an index in legalCards 
    deck.cards[cardsInDeck[randNum]].assignedTo = playerNum
    return cardsInDeck[randNum]#Adds the number to the players hand


class Player(): #TODO put in a module
    def __init__(self, playerNum = 1, name = "defalt", isComputer = False): #I can set all of these
        self.playerNum = playerNum
        self.name = name 
        self.isComputer = isComputer
        self.hand = Hand()
    #Every player has a hand

class Hand(): #TODO put in a module
    def __init__(self, cards = []):
        self.cards = []

    def ranksOfHand(self):
        ranksOfHand = []
        for i in range(len(self.cards)):
            ranksOfHand.append(self.cards[i].Rank())
        return ranksOfHand
    
    def suitsOfHand(self):
        suitsOfHand = []
        for i in range(len(self.cards)):
            suitsOfHand.append(self.cards[i].Suit())
        return suitsOfHand

    def printHand(self):
        printOut = []
        for i in range(len(self.cards)):
            printOut.append(rankName[self.cards[i].Rank()] + suitName[self.cards[i].Suit()])
        return printOut
        #With the cards that you have it should be able to calculate what kind of hand it has
        #[14, 0, 0, 0, True, True, False, 0, True, True]    ex Royal Flush
        #11001100014                                           Royal Flsuh

class Deck(): #TODO put in a module
    def __init__(self, cards = []):
        self.cards = cards
        for i in range(NUMCARDS):
            self.cards.append(Card(i))

class Card(): #TODO put in a module
    def __init__(self, index, assignedTo = 0):
        self.index = index
        self.assignedTo = assignedTo

    def Rank(self):
        return self.index % len(rankName)
    
    def Suit(self):
        return self.index // len(rankName)

if (__name__ == "__main__"):
    main()
