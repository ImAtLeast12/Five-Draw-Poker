from random import *
import ScoringHand as SH
NUMCARDS = 52

suitName =   ("♥", "♦", "♠", "♣")
rankName =   ("A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")
rankValue =  ( 14,  2 ,  3 ,  4 ,  5 ,  6 ,  7 ,  8 ,  9 ,  10 ,  11,  12,  13) #This would be usefull by a bunch and a half
playerName = ("deck", "P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8", "P9", "P10","P11")
isComputer = (True,True,True,False,False,False,False,False,False,False,False)
NUMPLAYERS = 2 #1 <= NUMPLAYERS <= 10
typeOfHand = ("High Card", "Pair", "Two Pair","Three of a Kind", "Straight", "Flush", "Full House", "Four of a Kind", "Straight Flush", "Royal Flush")

def main():
    deck = Deck() #Initilize deck and players
    player = []
    
    for on in range(NUMPLAYERS):
        player.append(Player(playerName[on+1], on+1, isComputer[on])) #Creates a player # gives the name # gives the player number # tells if it is a computer or not
        
    for i in range(5):
        for on in range(NUMPLAYERS):
            player[on].hand.addCard(deck.giveRandom()) #Make this generate a random card in the deck'''
            
    scores = []
    for on in range(NUMPLAYERS):
        input("It's " + player[on].name + "'s turn")
        #player[on].hand.cards = [Card(12),Card(9),Card(23),Card(11),Card(8)] #Lets me cheat for debugging purpouses 
        input("hand " + str(player[on].hand.printHand()))              #Players hand is shown
        player[on].hand.sortHandByRank()
        keep = []
        if (player[on].isComputer):
            keep = exchangeComputersHand(player[on])    #Computer says what it wants
        else:
            keep = exchangePlayersHand(player[on])      #User says what they want                                                #DEVELOPER
        keepGoodCards(player[on],deck,keep)             #gits rid of the cards you don't want keep the cards you do what

        input("new hand " + str(player[on].hand.printHand()))              #Shows the new Hand
        input("Score the hand"+ str(player[on].hand.chart()))
        input(player[on].hand.scoreChart())
        player[on].score = player[on].hand.scoreChart()
        scores.append(player[on].hand.scoreChart())
        print("\n"*2)
    print("Player: " + playerName[scores.index(max(scores)) + 1] + " wins with " + withWhat(max(scores)))

def withWhat(score):
    for exp in range(15):
        if (score//(100**exp) < 99):
            return typeOfHand[exp - 4]
    
def closeToFlush(ar2):
    for value in ar2:
        if (ar2.count(value) >= 3):
            keep = [False]*5
            for i in range(5):
                if (ar2[i] == value):
                    keep[i] = True
            return keep
    return -1

def closeToStraight(arr):
    #first make the bool array that tells if one is close
    rV = list(rankValue)
    rV.remove(14)
    rV.append(14)
    #print(rV)
    boolRank = [False]*13
    for i in arr:
        boolRank[i-2] = True #this is working just like on the board but I need to slide the thing to see the last part
                                #after that I will then need to find the lastgest value and start from there to tell me the keep
    nextStep = []
    maxKeep = -1
    maxRank = -1
    for i in range(len(boolRank)-5):
        if (boolRank[0+i:5+i].count(True) > 3):
            if (boolRank[0+i:5+i].count(True) > maxRank ):                
                maxRank = boolRank[0+i:5+i].count(True) #MaxRank = 4
                maxKeep = boolRank[0+i:5+i]             #maxKeep = [T,T,F,T,T] 
    return maxRank,maxKeep

def keepIndexes(arr):
    keep  = [False]*5
    for i in findAnyPairs(arr):
        keep[i] = True
    return keep

def findAnyPairs(arr): #These are sorted from least to greatest so if there is a pair then it will be next to each other
    similarIndex = []
    for i in range(len(arr) - 1):
        if (arr[0+i] == arr[1+i]):
            similarIndex.append(0+i) #it adds it to the ones that are the same
            similarIndex.append(1+i)
    similarIndex = list(set(similarIndex)) #I need to get rid of the doubles that I will have
    return similarIndex #This is great because it can do pair, 2 pair, 3 of a kind, full house, and 4 of a kind all in one function
    
def keepGoodCards(player,deck,keep):
    #print("keepGoodCards(player,deck,keep)"+str(keep))
    skip = 0
    if (str(type(keep)) == "<class 'int'>"):
        return 0
    for i in range(len(keep)):
        if(keep[i]):
            pass
        else:
            deck.cards.append(player.hand.cards[i - skip])
            player.hand.cards.remove(player.hand.cards[i - skip])
            player.hand.addCard(deck.giveRandom())
            skip += 1
    
def maximizeHighCards(player,keep):
    for i in range(len(keep)):
        if (keep[i] == -1):
            if (rankValue[player.hand.cards[i].rank()] >= 10):
                keep[i] = True
            else:
                keep[i] = False
    return keep

def exchangeComputersHand(player):
    keep = [-1]*len(player.hand.cards)

    arr = player.hand.rank()
    ar2 = player.hand.suit()

    arr.sort()
    ar2.sort()
    #print("Arr" + str(arr))
    #print("Ar2" + str(ar2))                 #Instead of doing all of this bull shit I would rather just have it send an objcet of a hand
                                            #Then it can minipulate the hand and send what ever it wants and it will be a hand for funzies
                                            #It will swap the cards aroud just as long as I keep the order in mind then I sould be golden
    if (SH.Straight(arr) or SH.Flush(ar2)): #This works
        return [True]*len(player.hand.cards)
    elif(findAnyPairs(arr)) != []:
        return keepIndexes(arr)
    elif(closeToStraight(arr)!= -1,-1):
        maxRank,maxKeep = closeToStraight(arr)
        return maxKeep
    elif(closeToFlush(ar2)!=-1): #Before I do this though I will need to sort it to suit
        return closeToFlush(ar2)
    keep = maximizeHighCards(player,keep) #Before I do this I will have to sort it back to rank
    return keep

def exchangePlayersHand(player):
    keep = [-1]*len(player.hand.cards)
    for i in range(len(keep)):
        waitingForGoodResponce = True
        while (waitingForGoodResponce):
            x = input("\t\tKeep " + str(player.hand.cards[i].printCard()) + ": ")
            x = x.lower()
            if (x == "yes" or x == "y"):
                keep[i] = True
                waitingForGoodResponce = False
            elif(x == "no" or x == "n"):
                keep[i] = False
                waitingForGoodResponce = False
            else:
                print("\t\tI don't know what you said")
    return keep

class Card(): #TODO put in a module
    def __init__(self, index):
        self.index = index

    def rank(self):
        return self.index % len(rankName)
    
    def suit(self):
        return self.index // len(rankName)

    def printCard(self):
        return (rankName[self.rank()] + suitName[self.suit()])

class Player(): 
    def __init__(self, name = "defalt", playerNum = 1, isComputer = False): #I can set all of these
        self.playerNum = playerNum
        self.name = name 
        self.isComputer = isComputer
        self.hand = Hand()
        self.score = -1

    def printStats(self):
        printOut = []
        printOut.append(self.name)
        printOut.append(self.playerNum)
        printOut.append(self.isComputer)
        printOut.append(self.hand.printHand())
        return printOut
        
class Deck(): 
    def __init__(self):
        self.cards = []
        for i in range(NUMCARDS):
            self.cards.append(Card(i)) #In other places I will remove them

    def printOut(self):
        printOut = []
        for i in range(len(self.cards)):
            printOut.append(self.cards[i].printCard())
        return printOut

    def giveRandom(self):
        randCard = int(random() * len(self.cards))
        randCard = self.cards[randCard]
        self.cards.remove(randCard)
        return randCard
    
class Hand():
    def __init__(self, cards = []):
        self.cards = []

    def scoreChart(self):
        total,base = (0,100)
        chart = self.chart()
        for i in range(len(chart)):
            total += chart[i]*base**i
        return total
 
    def sortHandByRank(self):
        for x in range(len(self.cards)-1):
            for y in range(x,len(self.cards)):
                if (self.cards[x].rank() > self.cards[y].rank()): #Swap if the first is bigger than the other
                    temp = self.cards[x]
                    self.cards[x] = self.cards[y]
                    self.cards[y] = temp

    def sortHandBySuit(self):
        for x in range(len(self.cards)-1):
            for y in range(x,len(self.cards)):
                if (self.cards[x].suit() > self.cards[y].suit()): #Swap if the first is bigger than the other
                    temp = self.cards[x]
                    self.cards[x] = self.cards[y]
                    self.cards[y] = temp
                    
    def addCard(self, Card):
        self.cards.append(Card)
        
    def removeCard(self,Index):
        self.cards.remove(Index)

    def printHand(self):
        printOut = []
        for i in range(len(self.cards)):
            printOut.append(self.cards[i].printCard())
        return printOut
    
    def rank(self):
        printOut = []
        for i in range(len(self.cards)):
            printOut.append(rankValue[self.cards[i].rank()])
        return printOut

    def suit(self):
        printOut = []
        for i in range(len(self.cards)):
            printOut.append(self.cards[i].suit())
        return printOut

    def rankSorted(self):
        x = self.rank()
        x.sort()
        return x
    
    def suitSorted(self):
        x = self.suit()
        x.sort()
        return x
    
    def chart(self):
        rank = self.rankSorted()
        suit = self.suitSorted()
        
        scoreChart = [rank[0],rank[1],rank[2],rank[3], #rank[4], #Breaks Extra ties
                    SH.HighCard(rank),
                    SH.OnePair(rank),
                    SH.TwoPair(rank),
                    SH.ThreeOfAKind(rank),
                    SH.Straight(rank),
                    SH.Flush(suit),
                    SH.FullHouse(rank),
                    SH.FourOfAKind(rank),
                    SH.StraightFlush(rank,suit),
                    SH.RoyalFlush(rank,suit)]
        return scoreChart
    
if (__name__ == "__main__"):
    main()
